---
# allow nginx > grafana > prometheus
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-grafana
  namespace: monitoring
spec:
  podSelector:
    matchLabels:
      app: prometheus-grafana
  ingress:
  # grafana public incoming:
  - from:
    # we have to open up access to grafana from any pod in the namespace that nginx is egressing from
    # but we would like to have a mechanism to AND the podSelector below this one:
    - namespaceSelector:
        matchLabels:
          name: system
      podSelector:
        matchLabels:
          app: nginx-ingress
          component: controller    
    # ports:
    # - port: 80
    #   protocol: TCP
  # prometheus scraper incoming:
  - from:
    - podSelector:
        matchLabels:
          app: prometheus
    # ports:
    # - port: 3000
    #   protocol: TCP
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: prometheus
---
# prometheus > scraping endpoints
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-prometheus
  namespace: monitoring
spec:
  podSelector:
    matchLabels:
      app: prometheus
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app: prometheus
    # ports:
    # - port: 9090
    #   protocol: TCP
  - from:
    - podSelector:
        matchLabels:
          app: prometheus-grafana
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: prometheus-grafana
    # ports:
    # - protocol: TCP
    #   port: 3000
    # - protocol: TCP
    #   port: 80
  - to:
    - podSelector:
        matchLabels:
          app: alertmanager
    # ports:
    # - protocol: TCP
    #   port: 9093
  - to:
    - podSelector:
        matchLabels:
          app: prometheus-exporter-node
    # ports:
    # - protocol: TCP
    #   port: 9100
  - to:
    - podSelector:
        matchLabels:
          app: prometheus-exporter-kube-state
    # ports:
    # - protocol: TCP
    #   port: 8080
  # nodePort services:
  - to:
    - ipBlock:
        cidr: 172.17.17.100/32
    ports:
    # exporter-node
    - protocol: TCP
      port: 9100
    # kubelet
    - protocol: TCP
      port: 10250
    # nginx-controller
    - protocol: TCP
      port: 9913
  # headless services:
  - to:
    - ipBlock:
        cidr: 10.96.0.0/8
  # coredns:
  - to:
    - namespaceSelector:
        matchLabels:
          name: kube-system
      podSelector:
        matchLabels:
          k8s-app: kube-dns
    # ports:
    # - port: 9153
    #   protocol: TCP
  # drone
  - to:
    - namespaceSelector:
        matchLabels:
          name: system
      podSelector:
        matchLabels:
          app: drone
          component: server
    # ports:
    # - protocol: TCP
    #   port: 8000
---
# allow prometheus ingress > alertmanager
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-alertmanager
  namespace: monitoring
spec:
  podSelector:
    matchLabels:
      app: alertmanager
  ingress:
  # mesh communication
  - from:
    - podSelector:
        matchLabels:
          app: alertmanager
    # ports:
    # - port: 6783
    #   protocol: TCP
  # prometheus
  - from:
    - podSelector:
        matchLabels:
          app: prometheus
---
# allow prometheus ingress > exporter-kube-state
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-exporter-kube-state
  namespace: monitoring
spec:
  podSelector:
    matchLabels:
      app: prometheus-exporter-kube-state
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app: prometheus
---
# allow prometheus ingress > exporter-node
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-exporter-node
  namespace: monitoring
spec:
  podSelector:
    matchLabels:
      app: prometheus-exporter-node
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app: prometheus
